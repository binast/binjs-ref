[package]
name = "binjs"
version = "0.4.0"
authors = ["David Teller <D.O.Teller@gmail.com>"]
homepage = "https://binast.github.io/ecmascript-binary-ast/"
repository = "https://github.com/binast/binjs-ref"
description = "Set of tools to manipulate files in the JavaScript Binary AST format."
license = "MIT"
build = "build.rs"

[build-dependencies]
which = "^2.0"

[dependencies]
binjs_generic = { path = "crates/binjs_generic", version = "*" }
binjs_es6 = { path = "crates/binjs_es6", version = "*" }
binjs_io = { path = "crates/binjs_io", version = "*" }
binjs_meta = { path = "crates/binjs_meta", version = "*" }
binjs_shared = { path = "crates/binjs_shared", version = "*" }
assert_matches = "^1.0"
bencher = "^0.1"
bincode = "^1.0"
clap = "^2.0"
env_logger = "^0.5"
glob = "^0.2"
Inflector = "^0.11"
itertools = "^0.7"
json = "^0.11"
log = "^0.4"
lzw = "^0.10"
rand = "^0.6"
test-logger = "^0.1"
vec_map = "^0.8"
yaml-rust = "^0.4"

[[bin]]
# Encode a text source to a BinAST file.
name = "binjs_encode"
path = "src/bin/encode.rs"

[[bin]]
# Decode a BinAST file to a text source
name = "binjs_decode"
path = "src/bin/decode.rs"

[[bin]]
# Dump a BinAST file structure to stdout.
name = "binjs_dump"
path = "src/bin/dump.rs"

[[bin]]
# From a sample of JS source files, extract the distribution
# of probabilities for all ASTs, write this distribution to
# disk. The distribution may then be reused by binjs_encode
# using the entropy format to encode further files.
name = "binjs_generate_prediction_tables"
path = "src/bin/generate_dictionary.rs"

[[bench]]
name = "bench_fb"
harness = false

[workspace]
members = ["crates/*"]
